name: ci

permissions:
  contents: read
  pull-requests: read
  actions: read

env:
  LLAMA_BOX_BUILD_VERSION: "${{ github.ref_name }}"

on:
  workflow_dispatch: { }
  push:
    tags:
      - "v*.*.*"
    branches:
      - "main"
      - "branch-v*.*"
    paths-ignore:
      - "docs/**"
      - "**.md"
      - "**.mdx"
      - "**.png"
      - "**.jpg"
      - "!.github/workflows/ci.yml"
  pull_request:
    branches:
      - "main"
    paths-ignore:
      - "docs/**"
      - "**.md"
      - "**.mdx"
      - "**.png"
      - "**.jpg"
      - "!.github/workflows/ci.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true


# Disable OpenMP,
# see https://github.com/ggerganov/llama.cpp/issues/7743#issuecomment-2148342691,
#     https://github.com/ggerganov/llama.cpp/issues/7719#issuecomment-2147631216.
jobs:

  linux-cuda:
    strategy:
      fail-fast: false
      matrix:
        # see https://hub.docker.com/r/nvidia/cuda/tags?page=&page_size=&ordering=&name=devel.
        #     11.8 ==> 11.8.0, CentOS 7.
        # build fat binary,
        # see https://developer.nvidia.com/cuda-gpus.
        include:
          - arch: 'amd64'
            version: '11.8'
            distro_container_image: 'nvidia/cuda:11.8.0-devel-centos7'
            cuda_arch: '60-real;61-real;70-real;75-real;80-real;86-real;89-real;90-real'
    runs-on: ubuntu-22.04
    steps:
      - name: Maximize Docker Build Space
        uses: gpustack/.github/.github/actions/maximize-docker-build-space@main
        with:
          deep-clean: false
          root-reserve-mb: 20480
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'
      - name: Setup Cache
        timeout-minutes: 5
        uses: actions/cache@v4
        with:
          key: cache-linux-cuda-${{ matrix.arch }}-${{ matrix.version }}
          path: |
            ${{ github.workspace }}/.cache
      - name: Setup QEMU
        if: ${{ matrix.arch == 'arm64' }}
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:qemu-v8.1.5
          platforms: "arm64"
      - name: Build
        env:
          CMAKE_VERSION: "3.22.1"
          CCACHE_DIR: "${{ github.workspace }}/.cache/ccache"
          CUDA_ARCHITECTURES: "${{ matrix.cuda_arch }}"
        run: |
          echo "===== SCRIPT ====="
          cat <<EOF > /tmp/entrypoint.sh
          #!/bin/bash
          if [ -f /etc/os-release ]; then
            source /etc/os-release
            cat /etc/os-release
            if [ "\${ID}" = "centos" ]; then
              # NB(thxCode): Patch for CentOS, see
              # https://github.com/ROCm/ROCm-docker/blob/db86386c24eeb45f5d3ba73564b00cc66566e537/dev/Dockerfile-centos-7.
              sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo \
                && sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo \
                && sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo
              yum install -y centos-release-scl
              sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo \
                && sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo \
                && sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo
              yum update -y \
                && yum install -y devtoolset-9 devtoolset-9-libatomic-devel devtoolset-9-elfutils-libelf-devel
              export PATH="/opt/rh/devtoolset-9/root/usr/bin:\${PATH}" \
                && export MANPATH="/opt/rh/devtoolset-9/root/usr/share/man:\${MANPATH}" \
                && export INFOPATH="/opt/rh/devtoolset-9/root/usr/share/info\${INFOPATH}" \
                && export PCP_DIR="/opt/rh/devtoolset-9/root" \
                && export PERL5LIB="/opt/rh/devtoolset-9/root//usr/lib64/perl5/vendor_perl:/opt/rh/devtoolset-9/root/usr/lib/perl5:/opt/rh/devtoolset-9/root//usr/share/perl5/" \
                && export LD_LIBRARY_PATH="/usr/local/lib:/opt/rh/devtoolset-9/root\$rpmlibdir\$rpmlibdir32\${LD_LIBRARY_PATH}" \
                && export PYTHONPATH="/opt/rh/devtoolset-9/root/usr/lib64/python\$pythonvers/site-packages:/opt/rh/devtoolset-9/root/usr/lib/python\$pythonvers/" \
                && export LDFLAGS="-Wl,-rpath=/opt/rh/devtoolset-9/root/usr/lib64 -Wl,-rpath=/opt/rh/devtoolset-9/root/usr/lib"
              yum --enablerepo=extras install -y epel-release
              yum install -y https://packages.endpointdev.com/rhel/\${VERSION_ID}/os/\$(uname -m)/endpoint-repo.\$(uname -m).rpm
              yum update -y \
                && yum install -y make glibc-static libstdc++-static ccache curl git
            else
              echo "Unsupport distribution: \${ID}"
              exit 1
            fi
          else
            echo "Unknown distribution"
            exit 1
          fi
          curl -L "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-\$(uname -m).tar.gz" | tar -zx -C /usr --strip-components 1
          git config --system --add safe.directory '*'
          mkdir -p ${{ github.workspace }}/.cache
          echo "===== BUILD ====="
          cmake -S ${{ github.workspace }} -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=Release \
            -DGGML_CUDA=on -DCMAKE_CUDA_ARCHITECTURES="${CUDA_ARCHITECTURES}" \
            ${{ matrix.arch == 'amd64' && '-DGGML_NATIVE=off' || '-DGGML_NATIVE=on' }} \
            -DGGML_CUDA_DMMV_X=4096 \
            -DGGML_CUDA_MMV_Y=256 \
            -DGGML_CUDA_F16=on \
            -DGGML_OPENMP=off \
            -DGGML_RPC=on
          cmake --build ${{ github.workspace }}/build --target llama-box --config Release -- -j $(nproc)
          echo "===== RESULT ====="
          if [ -f ${{ github.workspace }}/build/bin/llama-box ]; then
            ldd --version
            ldd ${{ github.workspace }}/build/bin/llama-box || true
          else
            exit 1
          fi
          EOF
          chmod +x /tmp/entrypoint.sh
          cat /tmp/entrypoint.sh

          docker run \
            --rm \
            --privileged \
            --platform linux/${{ matrix.arch }} \
            --volume ${{ github.workspace }}:${{ github.workspace }} \
            --workdir ${{ github.workspace }} \
            --env DEBIAN_FRONTEND=noninteractive \
            --env CCACHE_DIR \
            --env CUDA_ARCHITECTURES \
            --env LLAMA_BOX_BUILD_VERSION \
            --volume /tmp/entrypoint.sh:/entrypoint.sh \
            --entrypoint /entrypoint.sh \
            ${{ matrix.distro_container_image }}

          echo "===== PACKAGE ====="
          mkdir -p ${{ github.workspace }}/out
          zip -j ${{ github.workspace }}/out/llama-box-linux-${{ matrix.arch }}-cuda-${{ matrix.version }}.zip ${{ github.workspace }}/build/bin/llama-box
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/out/*.zip
          name: llama-box-linux-${{ matrix.arch }}-cuda-${{ matrix.version }}

  release:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    permissions:
      contents: write
      actions: read
      id-token: write
    runs-on: ubuntu-22.04
    needs:
      - linux-cuda

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/out
          merge-multiple: true
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          tag_name: "${{ env.VERSION }}"
          prerelease: ${{ contains(github.ref, 'rc') }}
          files: ${{ github.workspace }}/out/*
